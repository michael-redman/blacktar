BLACKTAR

Content-addressed backup system for Amazon S3.

Copyright 2014 Michael Redman

Blacktar comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law.  See LICENSE file.

ABOUT

Blacktar backs up your files to S3, encrypted by GNUPG, and indexed by the SHA-256 HMACs of the files' SHA-256 hashes.

This "content-addressed" design means that Blacktar only stores 1 copy of a file no matter how many copies are on your filesystem; Blacktar never has to re-back up unchanged files that have only been moved or renamed; you can make as many incremental backups as you want or clean up old garbage from the backup store without ever having to re-do a "full" backup; and Blacktar can resume an interrupted backup without re-transferring any files.

Blacktar also caches a list of which hashes are on S3, in /var/local/blacktar/bucket_name, so it doesn't have to list out your S3 bucket each backup run.  However see the paragraph in the "USE" section about special circumstances in which you must sort or rebuild the cache for the backup script to work properly.

Blacktar uses the Verity content tracking system to map between hashes and paths on your file system where content can be found or needs to be restored.

LIMITATIONS

Because Blacktar needs your Verity database to do restores, you must keep a backup of the database dump outside of Blacktar.

When indexing your files with Verity, you must use full pathnames (with the leading "/") or Blacktar will not be able to link to your files from the tempdir while backing them up.

See the note in the Verity README on the importance of a correct system clock.

Blacktar will refuse to back up files that have changed since you last indexed them with verity_index_paths.  If it takes a long time for the index and backup to run on your data set, this could cause volatile files not to be backed up for an indefinite number of index-backup cycles.

Filenames, their SHA-256 hashes, and the HMAC signatures of those hashes, are visible to other users in the output of "ps".

Blacktar inherits the limitations of all its dependencies, including Verity and libs3.  See the documentation for those projects for more information.

Blacktar will not work with pathnames that are close to the system maximum length, because it concatenates the target root you specify for restoring with the original path you backed up.

Blacktar uses the same passphrase for both GPG encryption and for calculating the HMACs of the file hashes.  By default Blacktar does not do anything to obscure the sizes of your files, although there is a naieve routine in the backup script you can uncomment, which will add a file of noise to each data file's tar archive before encrypting.

INSTALLING

Blacktar was developed on Debian Linux and has not yet been compiled or tested on other systems.

Blacktar depends on Verity, which you can clone from github.com/michael-redman

Blacktar also depends on Brian Ischo's libs3 library, which you can get here: http://aws.amazon.com/developertools/1648

See the documentation for libs3 for installation instructions for that package.

Blacktar builds with the standard "make" and "make install" commands.

See the note in the Verity documentation about memory usage.  Blacktar also supports the QUERY_TYPE=CORRELATED_SUBQUERY make option.

USE

Example commands to index, backup, & restore a tree, and compare the restored tree to the original:

you@yourhost:~$ { find /some/tree/ -print0; verity_list_paths -p /some/tree/ dbname=verity_example_db; } | sort -uz | verity_index_paths dbname=verity_example_db <(echo -n "my passphrase")
you@yourhost:~$ export S3_ACCESS_KEY_ID=your_access_key
you@yourhost:~$ export S3_SECRET_ACCESS_KEY=your_secret_key
you@yourhost:~$ blacktar_backup -p /some/tree/ dbname=verity_example_db <(echo -n "my passphrase") s3_bucket_name
you@yourhost:~$ blacktar_restore -p /some/tree/ dbname=verity_example_db <(echo -n "my passphrase") s3_bucket_name /tmp/new-root/
you@yourhost:~$ diff -r /some/tree/ /tmp/new-root/some/tree/

If you do not specify a path prefix with -p like in the example, Blacktar will back up or restore all files in your Verity database.

You may also specify a Unix timestamp as the -t option to blacktar_restore, which will restore the paths to the state as of the most recent Verity indexing less than or equal to the time you specifiey.  e.g., -t `date -d '20140214' +%s`

The backup and restore commands pass the database connection string to libpq unmodified.  See the libpq documentation for the full syntax.

Certain events may require you to sort or rebuild the cached bucket listing in /var/local/blacktar/bucket_name.  During each run, the backup script does binary searches on the cache to check which files are already backed up, appends the hashes of newly backed up files, and re-sorts the whole list before exiting so it is usable for the next run.  If a backup run is interrupted, "sort -u" the list manually before running blacktar_backup again.  If you switch computers, delete files from the S3 backup (intentionally or accidentally), or otherwise lose or dirty the cache, rebuild the list manually with the command "s3_list_keys bucket_name | blacktar_s3_hashes 'db conn string' passphrase_file | sort -u > /var/local/blacktar/bucket_name".

There is a bug affecting Blacktar and the above example on user accounts where gpg has never been run before.  Blacktar does not recognize messages like "gpg: directory `/home/ec2-user/.gnupg' created" as benign, and will abort backing up the current file.  Blacktar will backup any aborted files on the next run(s) when gpg is done printing its setup messages, or you can work around the bug entirely by manually encrypting a file with gpg before ever running blacktar_backup.

If the "s3" command gives you an error about not being able to find a shared library, you may need to run ldconfig on libs3's lib directory (probably /usr/local/lib?)

IN GOD WE TRVST.
