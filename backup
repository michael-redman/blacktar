#!/bin/bash

USE="verity_list -c ... | casillero_backup [ -s spool_dir ] [ -l limit_bytes ] [-h db_host ] db_name /key/file s3-bucket"

dir=`cd $(dirname $0) && pwd`

argv=("$@")
while	getopts "h:s:l:" opt; do
	case	"$opt" in
		h)	db_host_arg="-h $OPTARG";;
		s)	spool_dir="$OPTARG";;
		l)	limit="$OPTARG";;
		\?)	echo "$USE" >&2; exit 1;; esac; done
if [ $(($#-$OPTIND)) -ne 2 ]; then echo "$USE" >&2; exit 1; fi
db_name="${argv[$OPTIND-1]}"
passphrase_xxd="`xxd \"${argv[$OPTIND]}\"`"
bucket="${argv[$OPTIND+1]}"
total=0

umask 027

if [ ! "$tmp" ]; then tmp=/tmp; fi
mkdir "$tmp/$$"

function s3_put { #s3-bucket-name hash path
#	echo "put: starting $2 $3" >&2
	hmac=`echo -n "$hash" | "$dir"/../lib/casillero/hmacs <(echo -n "$passphrase_xxd" | xxd -r) | cut -d ' ' -f 1`
	mkdir "$tmp/$$/$2.d"
	ln -s "$3" "$tmp/$$/$2.d/$2"
#	noise to osbscure file size
#	"$dir"/../lib/casillero/noise "$3" "$tmp/$$/$2.d/noise"
	( ls "$tmp/$$/$2.d" | tar chCfT "$tmp/$$/$2.d" - - | gpg -c --force-mdc --batch --no-tty --passphrase-fd 3 3< <(echo -n "$passphrase_xxd" | xxd -r) > "$tmp/$$/$hmac" ) 2> "$tmp/$$/err"
	if [ `stat -c%s "$tmp/$$/err"` -ne 0 ]; then
		echo "casillero_backup put: aborting on tar|gpg error for $2 $3" >&2
		cat "$tmp/$$/err" >&2
		rm -f "$tmp/$$/$hmac"
		rm -rf "$tmp/$$/$2.d"
		return 1; fi
	rm "$tmp/$$/$2.d"/*
	md5=`md5sum "$tmp/$$/$hmac" | cut -d ' ' -f 1`
	( gpg --batch --no-tty --passphrase-fd 3 3< <(echo -n "$passphrase_xxd" | xxd -r) < "$tmp/$$/$hmac" | tar xCf "$tmp/$$/$2.d" - ) 2> "$tmp/$$/err"
#	err=`grep -v -e 'gpg: CAST5 encrypted data' -e 'gpg: encrypted with 1 passphrase' -e 'gpg: WARNING: message was not integrity protected' "$tmp/$$/err"`
	err=`grep -v -e 'gpg: CAST5 encrypted data' -e 'gpg: encrypted with 1 passphrase' "$tmp/$$/err"`
	if [ "$err" ]; then
		echo "casillero_backup put: aborting on gpg|tar pipe error for $2 $3" >&2
		echo "$err" >&2
		rm "$tmp/$$/$hmac"
		rm -rf "$tmp/$$/$2.d"
		return 1; fi 
	if	[ ! -f "$tmp/$$/$2.d/$2" ]; then
		echo "casillero_backup verify: missing from archive: $2 ( $3 )" >&2
		rm "$tmp/$$/$hmac"
		rm -rf "$tmp/$$/$2.d"
		return 1; fi
	test_hmac=`sha256sum "$tmp/$$/$2.d/$2" | cut -d ' ' -f 1`
	if	[ ! "$test_hmac" -o \( "$2" != "$test_hmac" \) ]
		then	rm -rf "$tmp/$$/$2.d"
			rm "$tmp/$$/$hmac"
			echo "put: aborting on checksum mismatch: $2 $3" 1>&2
			echo "$2"
			return 1; fi
	rm -rf "$tmp/$$/$2.d"
	total=`echo $total+$(stat -c %s "$tmp/$$/$hmac") | bc -l`
	if	[ "$spool_dir" ]
		then	#echo "put: copying $hmac to $spool_dir instead of uplaoding directly" >&2
			mkdir -p "$spool_dir"
			mv -i "$tmp/$$/$hmac" "$spool_dir/$hmac.$md5"
		else	md5=`echo $md5 | xxd -p -r | openssl enc -base64`
			casillero_s3_put "$1/$hmac" filename="$tmp/$$/$hmac" md5="$md5"
			rm "$tmp/$$/$hmac"
			echo "$hmac" >> /var/local/cache/casillero/"$1"
			fi
	#echo "put: finished $2 $3" >&2
	echo "$2$3"; }

cat /dev/stdin > "$tmp/$$/stdin-buf"

while IFS= read -r -d '' line; do
	echo ${line:0:64} >> "$tmp/$$/hashes.in"
	echo -n "$line" >> "$tmp/$$/stdin-sorted"
	echo -ne \\0 >> "$tmp/$$/stdin-sorted"
	done < <(sort -uz "$tmp/$$/stdin-buf")

"$dir"/../lib/casillero/hmacs <(echo -n "$passphrase_xxd" | xxd -r) < "$tmp/$$/hashes.in" | sort -u > "$tmp/$$/hash_lookup_table"
rm "$tmp/$$/hashes.in"
cut -d ' ' -f 1 < "$tmp/$$/hash_lookup_table" > "$tmp/$$/db"

if	[ ! -f "/var/local/cache/casillero/$bucket" ]
	then	casillero_s3_list_keys "$bucket" | sort -u \
		> "/var/local/cache/casillero/$bucket"; fi

diff "$tmp/$$/db" <(sort -u "/var/local/cache/casillero/$bucket") | grep '^<' | cut -c 3- | "$dir"/../lib/casillero/hashes "$tmp/$$/hash_lookup_table" > "$tmp/$$/diff.hashes"
rm "$tmp/$$/hash_lookup_table" "$tmp/$$/db"
if	[ ! -f "$tmp/$$/diff.hashes" ]
	then rm -rf "$tmp/$$"; exit; fi

while IFS= read -r -d '' line; do
	hash=`echo -n "$line" | cut -c 1-64`
	path=`echo -n "$line" | cut -c 65-`
	s3_put "$bucket" "$hash" "$path"
	if	[ "$limit" ]
		then if	[ "$total" -gt "$limit" ]; then break; fi; fi
	done < <("$dir"/../lib/casillero/paths "$tmp/$$/stdin-sorted" < "$tmp/$$/diff.hashes")

pg_dump $db_host_arg $db_name | gpg -c --force-mdc --passphrase-fd 3 3< <(echo -n "$passphrase_xxd" | xxd -r) > /tmp/$$/db
aws s3 cp /tmp/$$/db s3://"$bucket"/db.pg_dump.gpg

rm -rf "$tmp/$$"

#IN GOD WE TRVST.
